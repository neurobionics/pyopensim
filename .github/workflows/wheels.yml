name: Wheels
# Build distribution wheels with OpenSim dependencies

on:
  workflow_dispatch:
    inputs:
      build_ubuntu:
        description: 'Build Ubuntu wheels'
        required: false
        default: true
        type: boolean
      build_macos:
        description: 'Build macOS wheels'
        required: false
        default: true
        type: boolean
      build_windows:
        description: 'Build Windows wheels (WIP)'
        required: false
        default: false
        type: boolean
      force_rebuild_cache:
        description: 'Force rebuild OpenSim cache (ignores existing cache)'
        required: false
        default: false
        type: boolean
  # pull_request:
  # push:
  #   branches:
  #     - master
  #     - main
  release:
    types:
      - published

env:
  FORCE_COLOR: 3

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - build only selected platforms
            matrix="[]"
            if [ "${{ inputs.build_ubuntu }}" = "true" ]; then
              matrix=$(echo $matrix | jq '. += [{"os": "ubuntu-latest"}]')
            fi
            if [ "${{ inputs.build_macos }}" = "true" ]; then
              matrix=$(echo $matrix | jq '. += [{"os": "macos-latest"}]')
            fi
            if [ "${{ inputs.build_windows }}" = "true" ]; then
              matrix=$(echo $matrix | jq '. += [{"os": "windows-latest"}]')
            fi
          else
            # Automatic trigger - build Linux and macOS only (Windows has issues)
            matrix='[{"os": "ubuntu-latest"}, {"os": "macos-latest"}]'
          fi
          echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT


  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get OpenSim Core submodule SHA
        id: opensim-sha
        run: |
          OPENSIM_SHA=$(git rev-parse HEAD:src/opensim-core)
          echo "opensim_sha=$OPENSIM_SHA" >> $GITHUB_OUTPUT
          echo "OpenSim Core SHA: $OPENSIM_SHA"
        shell: bash


      # Ensure cache directory exists to prevent path validation errors
      - name: Create cache directory structure
        run: |
          mkdir -p opensim-cache
        shell: bash

      # Cache OpenSim build per container environment and architecture
      - name: Cache OpenSim build
        uses: actions/cache@v4
        with:
          path: |
            opensim-cache
          key: opensim-${{ matrix.os }}-${{ runner.arch }}-${{ steps.opensim-sha.outputs.opensim_sha }}-v3${{ inputs.force_rebuild_cache && '-rebuild' || '' }}
          restore-keys: |
            opensim-${{ matrix.os }}-${{ runner.arch }}-${{ steps.opensim-sha.outputs.opensim_sha }}-
            opensim-${{ matrix.os }}-${{ runner.arch }}-

      # All cibuildwheel configuration is in pyproject.toml under [tool.cibuildwheel]
      # This keeps the workflow clean and maintainable
      - uses: pypa/cibuildwheel@v3.1.3
        env:
          # Only workflow-specific environment variables here
          OPENSIM_SHA: ${{ steps.opensim-sha.outputs.opensim_sha }}

      - name: Verify clean directory
        run: git diff --exit-code
        shell: bash
        timeout-minutes: 5

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: wheelhouse/*.whl


  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build sdist
        run: pipx run build --sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: dist-sdist
          path: dist/*.tar.gz

  upload_all:
    name: Upload if release
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: pypi
    permissions:
      id-token: write

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          merge-multiple: true
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1