[build-system]
requires = [
    "scikit-build-core>=0.10.0",
    "numpy",
    "mypy",
    "packaging>=24.0"
]
build-backend = "scikit_build_core.build"


[project]
name = "pyopensim"
version = "0.2.1"
description="PyOpenSim: Portable Python bindings for OpenSim"
readme = "README.md"
authors = [ { name = "Senthur Ayyappan", email = "senthurayyappan@umich.edu" } ]
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
]

dependencies = [
    "numpy",
]

[project.optional-dependencies]
test = ["pytest"]
build = ["cibuildwheel"]


[tool.scikit-build]
wheel.expand-macos-universal-tags = true
# Don't specify wheel.packages - let CMake handle the installation

# Include stub files in the wheel for PEP 561 compliance
wheel.packages = ["pyopensim", "pyopensim-stubs"]

# Build configuration for faster, more verbose builds
build.verbose = true
logging.level = "INFO"

# Parallel build configuration (adjust based on available cores)
build.tool-args = []


[tool.cibuildwheel]
# Target Python versions
build = ["cp310-*", "cp311-*", "cp312-*"]
skip = "*musllinux*"
build-verbosity = 3  # Maximum verbosity to help diagnose issues and prevent timeout detection

# Test configuration
test-command = "pytest {project}/tests"
test-extras = ["test"]
test-skip = ["*universal2:arm64"]

[tool.cibuildwheel.linux]
archs = ["x86_64"]
# Use manylinux_2_28 for broader compatibility while still having modern tooling
manylinux-x86_64-image = "manylinux_2_28"
manylinux-i686-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
manylinux-ppc64le-image = "manylinux_2_28"
manylinux-s390x-image = "manylinux_2_28"

before-build = """
chmod +x scripts/ci/build_opensim.sh
CACHE_DIR="/host$(pwd)/opensim-cache/linux-$(uname -m)"
scripts/ci/build_opensim.sh --platform linux --cache-dir "$CACHE_DIR"
"""

before-test = """
echo "=== Installing OpenBLAS for tests ===" &&
dnf install -y openblas || yum install -y openblas || (apt-get update && apt-get install -y libopenblas0)
"""

environment = { PATH = "/host$(pwd)/opensim-cache/linux-$(uname -m)/cmake/bin:/host$(pwd)/opensim-cache/linux-$(uname -m)/swig/bin:$PATH", OPENSIM_INSTALL_DIR = "/host$(pwd)/opensim-cache/linux-$(uname -m)/opensim-install" }

repair-wheel-command = """
echo "=== Repairing Linux wheel ===" &&
OPENSIM_INSTALL="/host$(pwd)/opensim-cache/linux-$(uname -m)/opensim-install" &&
DEPS_INSTALL="/host$(pwd)/opensim-cache/linux-$(uname -m)/dependencies-install" &&
echo "Library paths for auditwheel:" &&
echo "  $OPENSIM_INSTALL/sdk/lib:$OPENSIM_INSTALL/sdk/Simbody/lib64:$OPENSIM_INSTALL/sdk/Simbody/lib:$DEPS_INSTALL/simbody/lib64:$DEPS_INSTALL/simbody/lib:$DEPS_INSTALL/ezc3d/lib64:$DEPS_INSTALL/ezc3d/lib:$DEPS_INSTALL/lib64:$DEPS_INSTALL/lib" &&
LD_LIBRARY_PATH="$OPENSIM_INSTALL/sdk/lib:$OPENSIM_INSTALL/sdk/Simbody/lib64:$OPENSIM_INSTALL/sdk/Simbody/lib:$DEPS_INSTALL/simbody/lib64:$DEPS_INSTALL/simbody/lib:$DEPS_INSTALL/ezc3d/lib64:$DEPS_INSTALL/ezc3d/lib:$DEPS_INSTALL/lib64:$DEPS_INSTALL/lib:$LD_LIBRARY_PATH" auditwheel repair --exclude libSimTKcommon.so.3.8 --exclude libSimTKmath.so.3.8 --exclude libSimTKsimbody.so.3.8 --exclude libopenblas.so.0 -w {dest_dir} {wheel}
"""

[tool.cibuildwheel.macos]
archs = ["universal2"]

before-build = """
chmod +x scripts/ci/build_opensim.sh
CACHE_DIR="$(pwd)/opensim-cache/macos-universal2"
scripts/ci/build_opensim.sh --platform macos --cache-dir "$CACHE_DIR"
"""

environment = { MACOSX_DEPLOYMENT_TARGET = "11.0", CMAKE_OSX_ARCHITECTURES = "x86_64;arm64", OPENSIM_INSTALL_DIR = "$(pwd)/opensim-cache/macos-universal2/opensim-install" }

repair-wheel-command = """
echo "=== Repairing macOS wheel ===" &&
OPENSIM_INSTALL="$(pwd)/opensim-cache/macos-universal2/opensim-install" &&
DYLD_LIBRARY_PATH="$OPENSIM_INSTALL/sdk/lib:$OPENSIM_INSTALL/sdk/Simbody/lib" delocate-wheel -w {dest_dir} -v {wheel}
"""

[tool.cibuildwheel.windows]
archs = ["AMD64"]

# Install delvewheel for Windows wheel repair, then build OpenSim
before-build = [
    "pip install delvewheel",
    "powershell -ExecutionPolicy Bypass -File scripts/ci/build_opensim.ps1 -CacheDir \"{project}/opensim-cache/windows-AMD64\" -Jobs 4"
]

# Set environment variables for DLL discovery
environment = { OPENSIM_INSTALL_DIR = "{project}/opensim-cache/windows-AMD64/opensim-install", OPENSIM_CACHE_DIR = "{project}/opensim-cache/windows-AMD64" }

# Use delvewheel to repair the wheel and bundle DLL dependencies
# Add all potential DLL directories from the cache
repair-wheel-command = """
delvewheel repair -w {dest_dir} {wheel} --add-path %OPENSIM_CACHE_DIR%\\opensim-install\\bin --add-path %OPENSIM_CACHE_DIR%\\opensim-install\\sdk\\bin --add-path %OPENSIM_CACHE_DIR%\\opensim-install\\sdk\\Simbody\\bin --add-path %OPENSIM_CACHE_DIR%\\dependencies-install\\bin --add-path %OPENSIM_CACHE_DIR%\\dependencies-install\\simbody\\bin --add-path %OPENSIM_CACHE_DIR%\\dependencies-install\\ezc3d\\bin
"""
